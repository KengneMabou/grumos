input {

    udp {
    	port => 25826
	host => "172.16.0.101" 
    	buffer_size => 1452
	codec => collectd{}
  }
}

filter {

	ruby {
		code =>'ev_hash = event.to_hash
			if !ev_hash.key?("collectd_type")
			event["data_shipper"] = "collectd"
			end
			if !ev_hash.key?("plugin_instance")
			event["plugin_instance"] = "global_system"
			end
			'
	}

	if [collectd_type] =~ "disk_" and [plugin] == "disk"{
		mutate {
			add_field => { "type" => "original" }
			add_field => { "event_type" => "system" }
		}
		clone {
			clones => ["read", "write"]
		}

		if [type] == "read" {
			mutate {
				add_field => { "type_instance" => "read" }
				add_field => { "value" => "%{read}" }
				remove_field => ["read"]
				remove_field => ["write"]
				remove_field => ["type"]
			}
		}
		else if [type] == "write" {
			mutate {
				add_field => { "type_instance" => "write" }
				add_field => { "value" => "%{write}" }
				remove_field => ["write"]
				remove_field => ["read"]
				remove_field => ["type"]
			}
		}
		else{

			drop { }
		}
	}
	else if [collectd_type] =~ "if_" and [plugin] == "interface"{
		mutate {
			add_field => { "type" => "original" }
			add_field => { "event_type" => "system" }
		}
		clone {
			clones => ["rx", "tx"]
		}

		if [type] == "rx" {
			mutate {
				add_field => { "type_instance" => "rx" }
				add_field => { "value" => "%{rx}" }
				remove_field => ["rx"]
				remove_field => ["tx"]
				remove_field => ["type"]
			}
		}
		else if [type] == "tx" {
			mutate {
				add_field => { "type_instance" => "tx" }
				add_field => { "value" => "%{tx}" }
				remove_field => ["tx"]
				remove_field => ["rx"]
				remove_field => ["type"]
			}
		}
		else{

			drop { }
		}
	}
	else if [collectd_type] =~ "load" and [plugin] == "load"{
		mutate {
			add_field => { "type" => "original" }
			add_field => { "event_type" => "system" }
		}
		clone {
			clones => ["shortterm", "midterm", "longterm"]
		}

		if [type] == "shortterm" {
			mutate {
				add_field => { "type_instance" => "shortterm" }
				add_field => { "value" => "%{shortterm}" }
				remove_field => ["shortterm"]
				remove_field => ["midterm"]
				remove_field => ["longterm"]
				remove_field => ["type"]
			}
		}
		else if [type] == "midterm" {
			mutate {
				add_field => { "type_instance" => "midterm" }
				add_field => { "value" => "%{midterm}" }
				remove_field => ["shortterm"]
				remove_field => ["midterm"]
				remove_field => ["longterm"]
				remove_field => ["type"]
			}
		}
		else if [type] == "longterm" {
			mutate {
				add_field => { "type_instance" => "longterm" }
				add_field => { "value" => "%{longterm}" }
				remove_field => ["shortterm"]
				remove_field => ["midterm"]
				remove_field => ["longterm"]
				remove_field => ["type"]
			}
		}
		else{

			drop { }
		}
	}

	mutate {
		add_field => { "unix_epoch_timestamp" => "" }
	}

	ruby {
		code =>'require "time"
			u_timestamp = 1000*Time.parse(event["@timestamp"].to_s).to_i
			event["unix_epoch_timestamp"] = u_timestamp.to_s'
	}

	
	mutate {
	add_field => {"metric_name" => "%{host}.%{metric_instance}.%{plugin_instance}.%{type_instance}"}
	add_field => {"correlation_msg" => "%{host}.hostname %{host}.%{metric_instance}.%{plugin_instance}.%{type_instance} %{value} %{unix_epoch_timestamp}"}
	rename => { "collectd_type" => "metric_instance" }
	}

}

output {

    	mongodb {
    		collection => "perf_data"
    		database => "grumos"
    		uri => "mongodb://127.0.0.1:27017/grumos"
    	}

	influxdb {
	    data_points => {'value' => '%{value}'}
	    host => "172.16.0.101"
	    measurement => "%{metric_name}"
	    db => "grumos"
	    retention_policy => "two_days"
	}
	

 	file {
	   	path => '/home/kengne/sec_assets/secdata'
	   	codec => line { format => "%{correlation_msg}"}
	 }

}
